// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hashservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HashServiceClient is the client API for HashService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashServiceClient interface {
	CreateHash(ctx context.Context, in *ProtoArrayOfStrings, opts ...grpc.CallOption) (*ProtoArrayOfHashes, error)
}

type hashServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHashServiceClient(cc grpc.ClientConnInterface) HashServiceClient {
	return &hashServiceClient{cc}
}

func (c *hashServiceClient) CreateHash(ctx context.Context, in *ProtoArrayOfStrings, opts ...grpc.CallOption) (*ProtoArrayOfHashes, error) {
	out := new(ProtoArrayOfHashes)
	err := c.cc.Invoke(ctx, "/hashservice.HashService/CreateHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashServiceServer is the server API for HashService service.
// All implementations must embed UnimplementedHashServiceServer
// for forward compatibility
type HashServiceServer interface {
	CreateHash(context.Context, *ProtoArrayOfStrings) (*ProtoArrayOfHashes, error)
	mustEmbedUnimplementedHashServiceServer()
}

// UnimplementedHashServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHashServiceServer struct {
}

func (UnimplementedHashServiceServer) CreateHash(context.Context, *ProtoArrayOfStrings) (*ProtoArrayOfHashes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHash not implemented")
}
func (UnimplementedHashServiceServer) mustEmbedUnimplementedHashServiceServer() {}

// UnsafeHashServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashServiceServer will
// result in compilation errors.
type UnsafeHashServiceServer interface {
	mustEmbedUnimplementedHashServiceServer()
}

func RegisterHashServiceServer(s grpc.ServiceRegistrar, srv HashServiceServer) {
	s.RegisterService(&HashService_ServiceDesc, srv)
}

func _HashService_CreateHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoArrayOfStrings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).CreateHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashservice.HashService/CreateHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).CreateHash(ctx, req.(*ProtoArrayOfStrings))
	}
	return interceptor(ctx, in, info, handler)
}

// HashService_ServiceDesc is the grpc.ServiceDesc for HashService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hashservice.HashService",
	HandlerType: (*HashServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHash",
			Handler:    _HashService_CreateHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
